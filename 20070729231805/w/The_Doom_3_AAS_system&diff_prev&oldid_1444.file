









































































































<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,follow" />
<meta name="keywords" content="The Doom 3 AAS system,Mr elusive's thesis,Extending the navigation system,IdAI ::PointReachableAreaNum,AAS settings" />
<link rel="shortcut icon" href="/web/20070729231805im_/http://modwiki.net/favicon.ico" />
<link title="Creative Commons" type="application/rdf+xml" href="/w/index.php?title=The_Doom_3_AAS_system&amp;action=creativecommons" rel="meta" />
<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<title>The Doom 3 AAS system - modwiki</title>
		<style type="text/css" media="screen,projection">/*<![CDATA[*/ @import "/web/20070729231805cs_/http://modwiki.net/w/skins/monobook/main.css?9"; /*]]>*/</style>
		<link rel="stylesheet" type="text/css" media="print" href="/web/20070729231805cs_/http://modwiki.net/w/skins/common/commonPrint.css" />
		<!--[if lt IE 5.5000]><style type="text/css">@import "/w/skins/monobook/IE50Fixes.css";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/w/skins/monobook/IE55Fixes.css";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/w/skins/monobook/IE60Fixes.css";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/w/skins/monobook/IE70Fixes.css?1";</style><![endif]-->
		<!--[if lt IE 7]><script type="text/javascript" src="/w/skins/common/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
		<script type="text/javascript">var skin = 'monobook';var stylepath = '/w/skins';</script>
		<script type="text/javascript" src="/web/20070729231805js_/http://modwiki.net/w/skins/common/wikibits.js?1"><!-- wikibits js --></script>
		<script type="text/javascript" src="/web/20070729231805js_/http://modwiki.net/w/index.php?title=-&amp;action=raw&amp;gen=js"><!-- site js --></script>
		<style type="text/css">/*<![CDATA[*/
@import "/web/20070729231805cs_/http://modwiki.net/w/index.php?title=MediaWiki:Common.css&action=raw&ctype=text/css&smaxage=18000";
@import "/web/20070729231805cs_/http://modwiki.net/w/index.php?title=MediaWiki:Monobook.css&action=raw&ctype=text/css&smaxage=18000";
@import "/web/20070729231805cs_/http://modwiki.net/w/index.php?title=-&action=raw&gen=css&maxage=18000";
/*]]>*/</style>
		<!-- Head Scripts -->
			</head>
<body  class="ns-0 ltr">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app1.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1420070399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/modwiki.net\/w\/index.php?title=The_Doom_3_AAS_system&diff=prev&oldid=1444";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 475;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "29";
var displayMonth = "Jul";
var displayYear = "2007";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20070729231805" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jun
                       
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 23:18:05 Jul 29, 2007">JUL</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Aug
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" />
                       
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 23:18:05 Jul 29, 2007">29</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2006
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 23:18:05 Jul 29, 2007">2007</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2008
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20070729231805*/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>1 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">29 Jul 07 - 29 Jul 07</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:475px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:475px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="475"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=475_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:6:000000100000_2008:-1:000000000000_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000_2014:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->

	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 class="firstHeading">The Doom 3 AAS system</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From modwiki</h3>
			<div id="contentSub">(Difference between revisions)</div>
									<div id="jump-to-nav">Jump to: <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#column-one">navigation</a>, <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#searchInput">search</a></div>			<!-- start content -->
			
			<table border='0' width='98%' cellpadding='0' cellspacing='4' class='diff'>
			<tr>
				<td colspan='2' width='50%' align='center' class='diff-otitle'><strong><a href='/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;oldid=1433'>Revision as of 05:05, 1 October 2005</a></strong><br /><a href="/web/20070729231805/http://modwiki.net/wiki/User:CusTom3" title="User:CusTom3">CusTom3</a>  (<a href="/web/20070729231805/http://modwiki.net/w/index.php?title=User_talk:CusTom3&amp;action=edit" class="new" title="User talk:CusTom3">Talk</a> | <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=Special:Contributions&amp;target=CusTom3" title="Special:Contributions">contribs</a>)<br /> <span class='comment'>(<span class="autocomment"><a href="/web/20070729231805/http://modwiki.net/wiki/The_Doom_3_AAS_system#Disclaimer" title="The Doom 3 AAS system">→</a>Disclaimer -</span>  = more disclaimers)</span><br /><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1433" title="The Doom 3 AAS system" id="differences-prevlink">? Previous diff</a></td>
				<td colspan='2' width='50%' align='center' class='diff-ntitle'><strong><a href='/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;oldid=1444'>Revision as of 05:06, 1 October 2005</a></strong><br /><a href="/web/20070729231805/http://modwiki.net/wiki/User:CusTom3" title="User:CusTom3">CusTom3</a>  (<a href="/web/20070729231805/http://modwiki.net/w/index.php?title=User_talk:CusTom3&amp;action=edit" class="new" title="User talk:CusTom3">Talk</a> | <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=Special:Contributions&amp;target=CusTom3" title="Special:Contributions">contribs</a>) <br /> <span class='comment'>(<span class="autocomment"><a href="/web/20070729231805/http://modwiki.net/wiki/The_Doom_3_AAS_system#Credits" title="The Doom 3 AAS system">→</a>Credits</span>)</span><br /><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=next&amp;oldid=1444" title="The Doom 3 AAS system" id="differences-nextlink">Next diff →</a></td>
			</tr>
			<tr><td colspan="2" align="left"><strong>Line 6:</strong></td>
<td colspan="2" align="left"><strong>Line 6:</strong></td></tr>
<tr><td> </td><td class='diff-context'></td><td> </td><td class='diff-context'></td></tr>
<tr><td> </td><td class='diff-context'>== Credits ==</td><td> </td><td class='diff-context'>== Credits ==</td></tr>
<tr><td>-</td><td class='diff-deletedline'>This entire thing is the result of me trying to understand the Area Awareness System system designed by J.M.P. van Waveren. His [[Mr_elusive%27s_thesis|thesis paper]] was invaluable in this process. Basically, all I did below is combine chapter 6 of the thesis with the doom 3 code. Credit goes out to him and all of id software for the kick ass games and sdk’s.</td><td>+</td><td class='diff-addedline'>This entire thing is the result of me trying to understand the Area Awareness System system designed by J.M.P. van Waveren. His [[Mr_elusive%27s_thesis|thesis paper]] was invaluable in this process. Basically, all I did below is combine chapter 6 of the thesis with the doom 3 code. Credit goes out to him and all of id software for the kick ass games and sdk’s<span class="diffchange">. thank you JP for all your help and advice</span>.</td></tr>
<tr><td> </td><td class='diff-context'></td><td> </td><td class='diff-context'></td></tr>
<tr><td> </td><td class='diff-context'>== Overview ==</td><td> </td><td class='diff-context'>== Overview ==</td></tr>

			</table>
		<hr /><h2>Revision as of 05:06, 1 October 2005</h2>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Disclaimer"><span class="tocnumber">1</span> <span class="toctext">Disclaimer</span></a></li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Credits"><span class="tocnumber">2</span> <span class="toctext">Credits</span></a></li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Overview"><span class="tocnumber">3</span> <span class="toctext">Overview</span></a></li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Creating_Areas"><span class="tocnumber">4</span> <span class="toctext">Creating Areas</span></a>
<ul>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Contents_of_volumes"><span class="tocnumber">4.1</span> <span class="toctext">Contents of volumes</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Portalisation"><span class="tocnumber">4.2</span> <span class="toctext">Portalisation</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Melting_things_together"><span class="tocnumber">4.3</span> <span class="toctext">Melting things together</span></a></li>
</ul>
</li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Environment_Sampling"><span class="tocnumber">5</span> <span class="toctext">Environment Sampling</span></a>
<ul>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Finding_the_area_a_player_is_in"><span class="tocnumber">5.1</span> <span class="toctext">Finding the area a player is in</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Recursive_subdivision_by_the_bsp_tree"><span class="tocnumber">5.2</span> <span class="toctext">Recursive subdivision by the bsp tree</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Finding_the_areas_a_trace_goes_through"><span class="tocnumber">5.3</span> <span class="toctext">Finding the areas a trace goes through</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Areas_a_bounding_box_is_in"><span class="tocnumber">5.4</span> <span class="toctext">Areas a bounding box is in</span></a></li>
</ul>
</li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Reachability"><span class="tocnumber">6</span> <span class="toctext">Reachability</span></a></li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Routing"><span class="tocnumber">7</span> <span class="toctext">Routing</span></a>
<ul>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Multi-level_algorithm_that_calculates_cache"><span class="tocnumber">7.1</span> <span class="toctext">Multi-level algorithm that calculates cache</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Routing_cache_and_Clusters"><span class="tocnumber">7.2</span> <span class="toctext">Routing cache and Clusters</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Calculating_routing_caches"><span class="tocnumber">7.3</span> <span class="toctext">Calculating routing caches</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Using_routing_caches"><span class="tocnumber">7.4</span> <span class="toctext">Using routing caches</span></a></li>
<li class='toclevel-2'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Entities"><span class="tocnumber">7.5</span> <span class="toctext">Entities</span></a></li>
</ul>
</li>
<li class='toclevel-1'><a href="/web/20070729231805/http://modwiki.net/w/index.php?title=The_Doom_3_AAS_system&amp;diff=prev&amp;oldid=1444#Other_stuff_to_talk_about"><span class="tocnumber">8</span> <span class="toctext">Other stuff to talk about</span></a></li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Disclaimer"></a><h2> Disclaimer </h2>
<p>The original intent of me writing all this down was to learn about the AAS system. Doom 3 is my first game programming experience and there is a lot to learn. I have found that writing it down as I go forces me to think through it in a way I wouldn’t have otherwise. I hope it can be of use to someone and apologize for the poor organization and rough writing that follows. I will be spending more time on this completing the areas that are missing and formatting all the code to look good up here over as time goes on.
</p><p>This article could actually use more updating, i have learned alot since writing it and haven't had the time.
</p>
<a name="Credits"></a><h2> Credits </h2>
<p>This entire thing is the result of me trying to understand the Area Awareness System system designed by J.M.P. van Waveren. His <a href="/web/20070729231805/http://modwiki.net/wiki/Mr_elusive%27s_thesis" title="Mr elusive's thesis">thesis paper</a> was invaluable in this process. Basically, all I did below is combine chapter 6 of the thesis with the doom 3 code. Credit goes out to him and all of id software for the kick ass games and sdk’s. thank you JP for all your help and advice.
</p>
<a name="Overview"></a><h2> Overview </h2>
<p><i>“The Area Awareness System (AAS) is the whole system used to provide the bot with all the information about the current state of the world. This includes information about navigation, routing and also other entities in the game. All the information is formatted and preprocessed for fast and easy access and usage by the bot. The heart of AAS is a special 3D representation of the game world. All information provided to the bot is in
some way related to or linked with this 3D representation?
</p><p>AAS uses 3D bounded hulls, called areas, with a specific property: the navigational complexity for traveling from any reachable point in an area to any other reachable point in the same area is minimal. … this means a player can move between any such two points by just walking or swimming along a straight line.
</p><p>Of course only knowing this property of each area does not provide all the information required for routing and navigation. However, so called reachabilities between areas can be calculated. Such a reachability is created from one area to another if a player can easily travel from one area to the other. Calculating these reachabilities is not all that difficult because a lot of areas will touch each other. When two areas touch, it can easily be verified if a player can really travel from one area to the other. This does not cover all the possible reachabilities between areas, but as will be shown later on, calculating other reachabilities is sometimes more complex, but definitely possible.
</p><p>The system, as it is presented here, is primarily focused on navigation and routing. However a lot of other information can be retrieved from or linked to this 3D representation.
</i>
</p>
<a name="Creating_Areas"></a><h2> Creating Areas </h2>
<p><i>
?All primitives used for collision… can now be expanded. All the space outside these expanded solid brushes is the space, where players can move around i.e. where the origin of the player bounding box can be. At this point convex hulls can be defined within this space. Within these convex hulls the player will be able to move with minimal navigational complexity. These convex hulls will become the areas of AAS?
.</i>
</p><p>We should look at how an area is represented in code. A file that one needs to understand well if one wants to dig into doom 3 AAS is AASFile.h. Pop it open and look for this:
</p><p><br /> 
</p>
<pre>&nbsp;
<span style="color: #339900;">// area with a boundary of faces</span>
<span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">struct</span> aasArea_s <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">int</span> numFaces;				<span style="color: #339900;">// number of faces used for the boundary of the area</span>
	<span style="color: #0000ff;">int</span>	firstFace;			<span style="color: #339900;">// first face in the face index used for the boundary of the area</span>
	idBounds bounds;			<span style="color: #339900;">// bounds of the area</span>
	idVec3	center;	 			<span style="color: #339900;">// center of the area an AI can move towards</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>	 flags;			<span style="color: #339900;">// several area flags</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>	 contents;		<span style="color: #339900;">// contents of the area</span>
	<span style="color: #0000ff;">short</span> cluster;				<span style="color: #339900;">// cluster the area belongs to, if negative it's a portal</span>
	<span style="color: #0000ff;">short</span> clusterAreaNum;			<span style="color: #339900;">// number of the area in the cluster</span>
	<span style="color: #0000ff;">int</span>	travelFlags;			<span style="color: #339900;">// travel flags for traveling through this area</span>
	idReachability *	reach;	 	<span style="color: #339900;">// reachabilities that start from this area</span>
	idReachability *	rev_reach; 	<span style="color: #339900;">// reachabilities that lead to this area</span>
<span style="color: #000000;">&#125;</span> aasArea_t;</pre>
<p>An area is a convex space defined by the faces that bound it. An area keeps track of how many faces it has bounding it and the index of its first face. The actual faces are shared between areas and are stored independent of the area itself. 
</p><p>Areas keep track of what cluster they belong to by storing the index of that cluster. We will get into clusters and what they are soon.  
</p><p>Areas can be tagged with travel flags to indicate which type of travel is necessary to cross the area. Must one fly, walk, swim, etc. Travel flags are used to indicate what type of travel an AI entity can use. The flags are also declared in AASFile.h.
</p>
<pre>&nbsp;
<span style="color: #339900;">// travel flags</span>
<span style="color: #339900;">#define TFL_INVALID			BIT(0)		// not valid					</span>
<span style="color: #339900;">#define TFL_WALK			BIT(1)		// walking						</span>
<span style="color: #339900;">#define TFL_CROUCH			BIT(2)		// crouching					</span>
<span style="color: #339900;">#define TFL_WALKOFFLEDGE		BIT(3)		// walking of a ledge			</span>
<span style="color: #339900;">#define TFL_BARRIERJUMP			BIT(4)		// jumping onto a barrier		</span>
<span style="color: #339900;">#define TFL_JUMP			BIT(5)		// jumping						</span>
<span style="color: #339900;">#define TFL_LADDER			BIT(6)		// climbing a ladder			</span>
<span style="color: #339900;">#define TFL_SWIM			BIT(7)		// swimming					</span>
<span style="color: #339900;">#define TFL_WATERJUMP			BIT(8)		// jump out of the water		</span>
<span style="color: #339900;">#define TFL_TELEPORT			BIT(9)		// teleportation				</span>
<span style="color: #339900;">#define TFL_ELEVATOR			BIT(10)		// travel by elevator			</span>
<span style="color: #339900;">#define TFL_FLY				BIT(11)		// fly							</span>
<span style="color: #339900;">#define TFL_SPECIAL			BIT(12)		// special						</span>
<span style="color: #339900;">#define TFL_WATER			BIT(21)		// travel through water		</span>
<span style="color: #339900;">#define TFL_AIR				BIT(22)		// travel through air			</span></pre>
<p>We will look at how these travel flags are compared by the routing system later.
</p><p>Areas store a pointer to the first “reachability? in a list that is all reachabilities that lead from the area they represent to other surrounding areas. Areas also store a list of the reachabilities that lead to the area from other areas. these are stored in reach and rev_reach. idReachability details are also coming up soon.
</p>
<a name="Contents_of_volumes"></a><h3> Contents of volumes </h3>
<p><i>“… the contents of certain volumes is also defined with brushes. For instance a water volume is defined with a special brush. The same goes for lava and slime. These brushes that define a contents can also be expanded and compiled into the BSP tree. The leaf nodes that only contain (parts of) these brushes, that define content, can be marked as volumes with that content.</i>
</p><p>Areas can be flagged as having contents or attributes. These flags can mean just about anything you want. The flags are used by the goal and routing algorithms. They are stored in the flags member and use bit masks to do their work. Here they are, also from idAASFile.h:
</p>
<pre>&nbsp;
<span style="color: #339900;">// area flags</span>
<span style="color: #339900;">#define AREA_FLOOR			BIT(0)		// AI can stand on the floor in this area</span>
<span style="color: #339900;">#define AREA_GAP			BIT(1)		// area has a gap								</span>
<span style="color: #339900;">#define AREA_LEDGE			BIT(2)		// if entered the AI bbox partly floats above a ledge</span>
<span style="color: #339900;">#define AREA_LADDER			BIT(3)		// area contains one or more ladder faces</span>
<span style="color: #339900;">#define AREA_LIQUID			BIT(4)		// area contains a liquid	</span>
<span style="color: #339900;">#define AREA_CROUCH			BIT(5)		// AI cannot walk but can only crouch in this area</span>
<span style="color: #339900;">#define AREA_REACHABLE_WALK		BIT(6)		// area is reachable by walking or swimming	</span>
<span style="color: #339900;">#define AREA_REACHABLE_FLY		BIT(7)		// area is reachable by flying					</span></pre>
<p><br />
</p>
<a name="Portalisation"></a><h3> Portalisation </h3>
<p><i>?In order to calculate reachabilities and routes between areas (as will be done later on), another representation is required for the convex hulls (areas). The BSP tree does store all the information needed, but the representation cannot easily be used to calculate relations between areas. A representation with areas that are bounded by faces would be much more suitable. These faces are polygons that either represent solid walls or lead to other areas. With such a representation adjacency of areas can easily be determined, and it is easier to find or calculate geometric properties. Such a representation can be created by portalising the BSP tree. This technique creates portals between all the leaf nodes defined by the BSP tree. These portals are the faces
that bound the areas?</i>
</p><p>We have already seen how areas store indexes to these faces. The representation of the face itself is in also in AASFile.h.
</p>
<pre>&nbsp;
<span style="color: #339900;">// area boundary face</span>
<span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">struct</span> aasFace_s <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>		planeNum;	<span style="color: #339900;">// number of the plane this face is on</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>		flags;		<span style="color: #339900;">// face flags</span>
	<span style="color: #0000ff;">int</span>			numEdges;	<span style="color: #339900;">// number of edges in the boundary of the face</span>
	<span style="color: #0000ff;">int</span>			firstEdge;	<span style="color: #339900;">// first edge in the edge index</span>
	<span style="color: #0000ff;">short</span>			areas<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">2</span><span style="color: #000000;">&#93;</span>;	<span style="color: #339900;">// area at the front and back of this face</span>
<span style="color: #000000;">&#125;</span> aasFace_t;</pre>
<p>The definition of a face contains the data necessary to define the geometric properties of the face. It is an area on a plane bounded by edges. It also stores the index of the two areas it divides.
Each face also can be tagged with flags. The flags defined in AASFile.h are listed below.
</p>
<pre>&nbsp;
<span style="color: #339900;">// face flags</span>
<span style="color: #339900;">#define FACE_SOLID			BIT(0)		// solid at the other side					</span>
<span style="color: #339900;">#define FACE_LADDER			BIT(1)		// ladder surface							</span>
<span style="color: #339900;">#define FACE_FLOOR			BIT(2)		// standing on floor when on this face		</span>
<span style="color: #339900;">#define FACE_LIQUID			BIT(3)		// face seperating two areas with liquid	</span>
<span style="color: #339900;">#define FACE_LIQUIDSURFACE	BIT(4)		// face seperating liquid and air			</span></pre>
<p><br />
<i>?After portalisation the basic representation needed for AAS is created. However this portalised BSP tree still needs some work and the whole representation can be optimized in several ways. The BSP tree structure is also not thrown away at this point, because it is a very useful access structure to the areas of AAS, as will be shown later on. Each area, with the face boundary representation, is linked into the BSP tree at the node that represents its convex sub-space.?</i>
</p><p>I will refer you to the thesis paper if you are interested in how the bsp tree is structured and created from the world space. The bsp tree is a tree of nodes which store the index of the plane that separates the two child nodes and the indexes to those children. 
</p><p>Here is that node definition from AASFile.h:
</p>
<pre>&nbsp;
<span style="color: #339900;">// nodes of the bsp tree</span>
<span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">struct</span> aasNode_s <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>	 planeNum;	<span style="color: #339900;">// number of the plane that splits the subspace at this node</span>
	<span style="color: #0000ff;">int</span>		children<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">2</span><span style="color: #000000;">&#93;</span>;	<span style="color: #339900;">// child nodes, zero is solid, negative is -(area number)</span>
<span style="color: #000000;">&#125;</span> aasNode_t;</pre>
<p>Note that a negative index for one of the children represents the negation of an area number. Areas are leaf nodes on the tree that result when the space in the map is no longer divided by a plane. We will look at how the bsp tree is walked later in environment sampling to find these areas.
</p>
<a name="Melting_things_together"></a><h3> Melting things together </h3>
<p><i>
“The data used for AAS is the collection of all the areas with their face boundary representation and the BSP-tree as a fast and very useful access structure to the areas. All the boundary representations of the areas will share data. The areas will share faces, edges of faces and vertices. This will allow to more easily find shared faces, edges and vertices between adjacent areas.?
</i>
</p><p>This shared data is actually stored in the idAASFile class, again, declaration in AASFile.h:
</p>
<pre>&nbsp;
class idAASFile <span style="color: #000000;">&#123;</span>
&nbsp;
<span style="color: #339900; font-style: italic;">/* public functional interface removed for clarity */</span>
<span style="color: #0000ff;">protected</span>:
	idStr				name;
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span>			crc;
&nbsp;
	idPlaneSet			planeList;
	idList&lt;aasVertex_t&gt;		vertices;
	idList&lt;aasEdge_t&gt;		edges;
	idList&lt;aasIndex_t&gt;		edgeIndex;
	idList&lt;aasFace_t&gt;		faces;
	idList&lt;aasIndex_t&gt;		faceIndex;
	idList&lt;aasArea_t&gt;		areas;
	idList&lt;aasNode_t&gt;		nodes;
	idList&lt;aasPortal_t&gt;		portals;
	idList&lt;aasIndex_t&gt;		portalIndex;
	idList&lt;aasCluster_t&gt;		clusters;
	idAASSettings			settings;
<span style="color: #000000;">&#125;</span>;</pre>
<a name="Environment_Sampling"></a><h2> Environment Sampling </h2>
<p><i>
“There are various ways to extract information from the 3D representation used for AAS. Especially the BSP tree is a very useful structure, which allows to calculate and extract certain information about the environment very easily.?
</i>
</p>
<a name="Finding_the_area_a_player_is_in"></a><h3> Finding the area a player is in </h3>
<p><i>
“First of all it will be useful to know which area a bot is in. Using the BSP tree there is a very fast and easy way to calculate the area a bot is in. One can start at the root node of the BSP tree and calculate the side of the plane, stored at that node, the origin of the bot’s bounding box is at. Depending on the side of the plane the origin is at, one continues with one of the child nodes that represents either the sub-space at the front, or the sub-space at the back of the plane. At this child node one again calculates which side of the plane, stored at the child node, the origin of the bounding box is at, and one continues with one of it’s children accordingly. This procedure is continued until one of the areas of AAS is found. That area is the area the bot is situated in.?
</i>
</p><p>The functionality to get the area the player or any point is in is implemented in the engine. The method signatures are declared in AASFile.h in the idAASFile class:
</p>
<pre>&nbsp;
class idAASFile <span style="color: #000000;">&#123;</span>
&nbsp;
<span style="color: #339900; font-style: italic;">/* removed irrelevant code */</span>
&nbsp;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span>	PointAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span>	PointReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin, <span style="color: #0000ff;">const</span> idBounds &amp;searchBounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> excludeTravelFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span>	BoundsReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idBounds &amp;bounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> excludeTravelFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;
&nbsp;
<span style="color: #339900; font-style: italic;">/* removed irrelevant code */</span></pre>
<p>PointAreaNum will return the area in the AAS system that a given point is in.
</p><p>PointReachableAreaNum, well, brian from id said it best:
<i>
“It returns the closest reachable area to the specified point.  If the point is in a reachable area already, it just returns that point, otherwise (for example if the given point is outside the world or inside some geometry) it will scan the bounding box given searching for reachable areas.?
</p><p>“If a point is really far outside an area (it looks like the threshold is more than 12 units in all directions), then it will return 0.?
</i>
So the same idea as PointAreaNum, but considers whether the area is reachable in its calculations.
<b> TODO: BoundsReachableAreaNum isn’t used right now but describe it anyway</b>
It is useful to know that these same methods names appear elsewhere in the sdk.
</p><p>In AAS.h the idAAS class is defined:
</p>
<pre>&nbsp;
class idAAS <span style="color: #000000;">&#123;</span>
<span style="color: #339900; font-style: italic;">/* removed irrelevant code */</span>
&nbsp;
<span style="color: #339900;">// Returns the number of the area the origin is in.</span>
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span>	PointAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;
&nbsp;
<span style="color: #339900;">// Returns the number of the nearest reachable area for the given point.</span>
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span>	PointReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin, <span style="color: #0000ff;">const</span> idBounds &amp;bounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;
&nbsp;
<span style="color: #339900;">// Returns the number of the first reachable area in or touching the bounds.</span>
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span> 	BoundsReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idBounds &amp;bounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;
&nbsp;
<span style="color: #339900; font-style: italic;">/* removed irrelevant code */</span></pre>
<p>We will look a lot more at idAAS as we go too. The idAAS definition is an interface. The actual implementation is in the class idAASLocal defined in AAS_local.h and implemented in AAS.cpp
</p>
<pre>&nbsp;
class idAASLocal&nbsp;: <span style="color: #0000ff;">public</span> idAAS <span style="color: #000000;">&#123;</span>
<span style="color: #339900; font-style: italic;">/* removed irrelevant code */</span>
&nbsp;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span> PointAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span>;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span> PointReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin, <span style="color: #0000ff;">const</span> idBounds &amp;searchBounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span>;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span> BoundsReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idBounds &amp;bounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span>;
&nbsp;
<span style="color: #339900; font-style: italic;">/* removed irrelevant code */</span></pre> 
<p>The implementation is just a wrapper around the idAASFile implementation:
</p>
<pre>&nbsp;
<span style="color: #339900; font-style: italic;">/*
============
idAASLocal::PointAreaNum
============
*/</span>
<span style="color: #0000ff;">int</span> idAASLocal::<span style="color: #00aabb;">PointAreaNum</span><span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span>&nbsp;!<span style="color: #0000ff;">file</span> <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span>;
	<span style="color: #000000;">&#125;</span>
	<span style="color: #0000ff;">return</span> file-&gt;PointAreaNum<span style="color: #000000;">&#40;</span> origin <span style="color: #000000;">&#41;</span>;
<span style="color: #000000;">&#125;</span></pre>
<p>PointReachableAreaNum is actually also declared in idAI in AI.h:
</p>
<pre>&nbsp;
<span style="color: #0000ff;">Int</span> PointReachableAreaNum<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;pos, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">float</span> boundsScale = <span style="color: #0000dd;">2</span>.0f <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span>;</pre>
<p>If you follow the implementation all the way back down from there you will see:
</p>
<pre>&nbsp;
<span style="color: #339900; font-style: italic;">/*
=====================
idAI::PointReachableAreaNum
=====================
*/</span>
<span style="color: #0000ff;">int</span> idAI::<span style="color: #00aabb;">PointReachableAreaNum</span><span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;pos, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">float</span> boundsScale <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">int</span> areaNum;
	idVec3 size;
	idBounds bounds;
&nbsp;
	<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span>&nbsp;!aas <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span>;
	<span style="color: #000000;">&#125;</span>
	<span style="color: #339900;">// set up the bounding box that is used for reachability</span>
	size = aas-&gt;GetSettings<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>-&gt;boundingBoxes<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span><span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span> * boundsScale;
	bounds<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span> = -size;
	size.<span style="color: #00aabb;">z</span> = <span style="color: #0000dd;">32</span>.0f;
	bounds<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span> = size;
&nbsp;
	<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span> move.<span style="color: #00aabb;">moveType</span> == MOVETYPE_FLY <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
		areaNum = aas-&gt;PointReachableAreaNum<span style="color: #000000;">&#40;</span> pos, bounds, AREA_REACHABLE_WALK | AREA_REACHABLE_FLY <span style="color: #000000;">&#41;</span>;
	<span style="color: #000000;">&#125;</span> <span style="color: #0000ff;">else</span> <span style="color: #000000;">&#123;</span>
		areaNum = aas-&gt;PointReachableAreaNum<span style="color: #000000;">&#40;</span> pos, bounds, AREA_REACHABLE_WALK <span style="color: #000000;">&#41;</span>;
	<span style="color: #000000;">&#125;</span>
&nbsp;
	<span style="color: #0000ff;">return</span> areaNum;
<span style="color: #000000;">&#125;</span></pre>
<p>At the idAI level the work of setting up the bounding boxes and travel flags is done. idAI uses its instance of pointer to idAAS to get the bounds. At some point maybe a page about <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=AAS_settings&amp;action=edit" class="new" title="AAS settings">AAS settings</a> will happen. 
</p><p>After <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=IdAI_::PointReachableAreaNum&amp;action=edit" class="new" title="IdAI ::PointReachableAreaNum">idAI ::PointReachableAreaNum</a> does its work it calls AASLocal’s version of the same method.
</p>
<pre>&nbsp;
<span style="color: #339900; font-style: italic;">/*
============
idAASLocal::PointReachableAreaNum
============
*/</span>
<span style="color: #0000ff;">int</span> idAASLocal::<span style="color: #00aabb;">PointReachableAreaNum</span><span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idVec3 &amp;origin, <span style="color: #0000ff;">const</span> idBounds &amp;searchBounds, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> areaFlags <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span>&nbsp;!<span style="color: #0000ff;">file</span> <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span>;
	<span style="color: #000000;">&#125;</span>
&nbsp;
	<span style="color: #0000ff;">return</span> file-&gt;PointReachableAreaNum<span style="color: #000000;">&#40;</span> origin, searchBounds, areaFlags, TFL_INVALID <span style="color: #000000;">&#41;</span>;
<span style="color: #000000;">&#125;</span></pre>
<p>Which is just a wrapper around idAASFile’s version, passing in the TFL_INVALID flag for excluded travel flags.
</p>
<a name="Recursive_subdivision_by_the_bsp_tree"></a><h3> Recursive subdivision by the bsp tree </h3>
<p><b>TODO</b>
</p>
<a name="Finding_the_areas_a_trace_goes_through"></a><h3> Finding the areas a trace goes through </h3>
<p><b>Code dump for tracing. TODO</b>
</p>
<pre>&nbsp;
<span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">bool</span> Trace<span style="color: #000000;">&#40;</span> aasTrace_t &amp;trace, <span style="color: #0000ff;">const</span> idVec3 &amp;start, <span style="color: #0000ff;">const</span> idVec3 &amp;end <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> = <span style="color: #0000dd;">0</span>;</pre>
<pre>&nbsp;
<span style="color: #339900;">// trace through the world</span>
<span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">struct</span> aasTrace_s <span style="color: #000000;">&#123;</span>
					<span style="color: #339900;">// parameters</span>
	<span style="color: #0000ff;">int</span>				flags;			<span style="color: #339900;">// areas with these flags block the trace</span>
	<span style="color: #0000ff;">int</span>				travelFlags;		<span style="color: #339900;">// areas with these travel flags block the trace</span>
	<span style="color: #0000ff;">int</span>				maxAreas;		<span style="color: #339900;">// size of the 'areas' array</span>
	<span style="color: #0000ff;">int</span>				getOutOfSolid;		<span style="color: #339900;">// trace out of solid if the trace starts in solid</span>
					<span style="color: #339900;">// output</span>
	<span style="color: #0000ff;">float</span>				fraction;		<span style="color: #339900;">// fraction of trace completed</span>
	idVec3				endpos;			<span style="color: #339900;">// end position of trace</span>
	<span style="color: #0000ff;">int</span>				planeNum;		<span style="color: #339900;">// plane hit</span>
	<span style="color: #0000ff;">int</span>				lastAreaNum;		<span style="color: #339900;">// number of last area the trace went through</span>
	<span style="color: #0000ff;">int</span>				blockingAreaNum;	<span style="color: #339900;">// area that could not be entered</span>
	<span style="color: #0000ff;">int</span>				numAreas;		<span style="color: #339900;">// number of areas the trace went through</span>
	<span style="color: #0000ff;">int</span> *				areas;			<span style="color: #339900;">// array to store areas the trace went through</span>
	idVec3 *			points;			<span style="color: #339900;">// points where the trace entered each new area</span>
					aasTrace_s<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">void</span> <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span> areas = <span style="color: #0000ff;">NULL</span>; points = <span style="color: #0000ff;">NULL</span>; getOutOfSolid = <span style="color: #0000ff;">false</span>; flags = travelFlags = maxAreas = <span style="color: #0000dd;">0</span>; <span style="color: #000000;">&#125;</span>
<span style="color: #000000;">&#125;</span> aasTrace_t;</pre>
<p><i>
“idAASFile::Trace actually allows you to get an ordered list of all areas the a line goes through if
you set aasTrace_t::areas to an integer array and aasTrace_t::maxAreas to the maximum number of elements in this array. The array will be filled in with the numbers of the areas the line went through and aasTrace_t::numAreas will be set to the number of areas.?
</i>
</p>
<a name="Areas_a_bounding_box_is_in"></a><h3> Areas a bounding box is in </h3>
<p><i>
“In order to calculate if the bot’s bounding box can or will touch the bounding boxes of other entities in the world, it is often useful to know in which area(s) the bounding boxes of entities are. To calculate this the bounding box of the entity has to be expanded, just like the brushes are expanded for collision calculations. This expansion is necessary, because the not expanded bounding box can be outside all areas, when at the same time the bot might be able to touch the bounding box while standing in a certain area. After expansion it can be calculated in which area(s) the bounding box resides, by testing on which side of the BSP tree split planes the bounding box is situated. This works similar to how the area a bot is in, is found. However a bounding box is now used instead of a point?
</i>
</p><p>Side Note:You can use BoundsReachableAreaNum to return the number of the first reachable area in or touching the bounds you pass to it. 
</p><p>However if you want a list of the areas as described above you will have to take a look at idAASLocal::GetBoundsAreas_r. Before we look at it lets look at how it is used. The only place that it is called in the sdk is from idAASLocal::AddObstacle. The only thing to note from AddObstacle for now is how the bounds passed to GetBoundsArea_r are expanded and how the root node, 1, is passed to the GetBoundsAreas_r. We will get into how obstacles are used later.
</p>
<pre>&nbsp;
<span style="color: #339900; font-style: italic;">/*
============
idAASLocal::AddObstacle
============
*/</span>
aasHandle_t idAASLocal::<span style="color: #00aabb;">AddObstacle</span><span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">const</span> idBounds &amp;bounds <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
	idRoutingObstacle *obstacle;
&nbsp;
	<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span>&nbsp;!<span style="color: #0000ff;">file</span> <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
		<span style="color: #0000ff;">return</span> -<span style="color: #0000dd;">1</span>;
	<span style="color: #000000;">&#125;</span>
&nbsp;
	obstacle = <span style="color: #0000dd;">new</span> idRoutingObstacle;
	obstacle-&gt;bounds<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span> = bounds<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span> - file-&gt;GetSettings<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>.<span style="color: #00aabb;">boundingBoxes</span><span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span><span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span>;
	obstacle-&gt;bounds<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span> = bounds<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span> - file-&gt;GetSettings<span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span>.<span style="color: #00aabb;">boundingBoxes</span><span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span><span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span>;
	GetBoundsAreas_r<span style="color: #000000;">&#40;</span> <span style="color: #0000dd;">1</span>, obstacle-&gt;bounds, obstacle-&gt;areas <span style="color: #000000;">&#41;</span>;
	SetObstacleState<span style="color: #000000;">&#40;</span> obstacle, <span style="color: #0000ff;">true</span> <span style="color: #000000;">&#41;</span>;
&nbsp;
	obstacleList.<span style="color: #00aabb;">Append</span><span style="color: #000000;">&#40;</span> obstacle <span style="color: #000000;">&#41;</span>;
	<span style="color: #0000ff;">return</span> obstacleList.<span style="color: #00aabb;">Num</span><span style="color: #000000;">&#40;</span><span style="color: #000000;">&#41;</span> - <span style="color: #0000dd;">1</span>;
<span style="color: #000000;">&#125;</span></pre>
<p>Now for the actual routine. 
<i>
“One starts at the root node of the BSP tree and calculates which side of the plane, stored at that node, the bounding box is at.?
</i>
</p>
<pre>&nbsp;
<span style="color: #339900; font-style: italic;">/*
============
idAASLocal::GetBoundsAreas_r
============
*/</span>
<span style="color: #0000ff;">void</span> idAASLocal::<span style="color: #00aabb;">GetBoundsAreas_r</span><span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">int</span> nodeNum, <span style="color: #0000ff;">const</span> idBounds &amp;bounds, idList&lt;int&gt; &amp;areas <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">int</span> res;
	<span style="color: #0000ff;">const</span> aasNode_t *node;
&nbsp;
	<span style="color: #0000ff;">while</span><span style="color: #000000;">&#40;</span> nodeNum&nbsp;!= <span style="color: #0000dd;">0</span> <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
&nbsp;</pre>
<p><i>
“This procedure is continued until all the areas of AAS the bounding box is in are found.?
</i>
</p>
<pre>&nbsp;
		<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span> nodeNum &lt; <span style="color: #0000dd;">0</span> <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
			areas.<span style="color: #00aabb;">Append</span><span style="color: #000000;">&#40;</span> -nodeNum <span style="color: #000000;">&#41;</span>;
			<span style="color: #0000ff;">break</span>;
		<span style="color: #000000;">&#125;</span></pre>
<p>To understand the check above it helps to understand how the bsp tree we are navigating was built. It is quite a bit of reading, and I don’t have code to annotate for it, so I will again refer you to chapter 6 in <a href="/web/20070729231805/http://modwiki.net/wiki/Mr_elusive%27s_thesis" title="Mr elusive's thesis">Mr_elusive's_thesis</a>.  The routine checks if the nodeNum is negative. It does this because nodes that have negative indexes are leaf nodes. So, when we find a negative nodeNum, we know we have found a leaf node that our bounds is in. We append the area index to the list passed in to be populated and break out of the loop. 
</p><p>If the nodeNum isn’t negative, we have to keep searching…
</p><p>“Depending on the side of the plane the bounding box is at one continues with one of the child nodes, that represents either the sub-space at the front or the sub-space at the back of the plane.
&lt;/i&gt;
</p>
<pre>&nbsp;
		node = &amp;file-&gt;GetNode<span style="color: #000000;">&#40;</span> nodeNum <span style="color: #000000;">&#41;</span>;
		res = bounds.<span style="color: #00aabb;">PlaneSide</span><span style="color: #000000;">&#40;</span> file-&gt;GetPlane<span style="color: #000000;">&#40;</span> node-&gt;planeNum <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#41;</span>;
		<span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span> res == PLANESIDE_BACK <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
			nodeNum = node-&gt;children<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span>;
		<span style="color: #000000;">&#125;</span>
		<span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #000000;">&#40;</span> res == PLANESIDE_FRONT <span style="color: #000000;">&#41;</span> <span style="color: #000000;">&#123;</span>
			nodeNum = node-&gt;children<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span>;
		<span style="color: #000000;">&#125;</span></pre>
<p>We find out which side of the splitting plane the bounding box is on and set the nodeNum to the child that represents that side of the plane for the next iteration through the loop.
</p><p><i> 
“In case the plane stored at the node splits the bounding box one continues with both children. 
</i>
</p>
<pre>&nbsp;
		<span style="color: #0000ff;">else</span> <span style="color: #000000;">&#123;</span>
			GetBoundsAreas_r<span style="color: #000000;">&#40;</span> node-&gt;children<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">1</span><span style="color: #000000;">&#93;</span>, bounds, areas <span style="color: #000000;">&#41;</span>;
			nodeNum = node-&gt;children<span style="color: #000000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #000000;">&#93;</span>;
		<span style="color: #000000;">&#125;</span>
	<span style="color: #000000;">&#125;</span>
<span style="color: #000000;">&#125;</span></pre>
<p>By calling GetBoundsAreas_r recursively we are able to divide the search down two branches of the tree.
</p><p><i>
“At each child node one again calculates which side of the plane, stored at the child node, the bounding box is at, and one continues with one or both of it’s children accordingly.?
</i>
In other words back to the top of the while loop.
</p>
<a name="Reachability"></a><h2> Reachability </h2>
<p><i>
“Just the area representations are not sufficient for the bot to travel through the whole map. The bot will need to know how to travel from one area to the other, if possible at all. Therefore so-called reachabilities between areas are calculated. Such a reachability always starts in a certain area and leads to one other area. All possible reachabilities can be classified using about 12 different types...?
</p><p>- Swimming in a straight line
- Walking in a straight line
- Crouching in a straight line
- Jumping onto a barrier
- Walking of a ledge
- Jumping out of the water
- Jumping
- Teleporting
- Using an elevator
- Using a jump pad
- Using a bobbing platform
- Rocket jumping
</i>
</p><p>Currently in doom 3 however:
<i>
“The Doom3 AAS compiler finds the following reachabilities:
</p><p>TFL_WALK
TFL_BARRIERJUMP
TFL_WALKOFFLEDGE
TFL_SWIM
TFL_WATERJUMP
TFL_FLY
</p><p>although the swim and fly reachabilities are only calculated if in the AAS
settings "allowSwimReachabilities" and "allowFlyReachabilities" are set
respectively. There tend to be a lot of fly reachabilities so we don't waste
memory to store them if there are no flying creatures in a level.
</p><p>Since the Doom3 AAS format is very open and the environment sampling
functionality is exposed through idAASFile as well it shouldn't be too hard
for third parties to write a tool that adds more reachabilities to an AAS
file.?
</i>
The task of extending the AAS as described is underway; you can read about it over <a href="/web/20070729231805/http://modwiki.net/w/index.php?title=Extending_the_navigation_system&amp;action=edit" class="new" title="Extending the navigation system">here</a>. <b> warning, that page needs updating</b>
</p><p>idReachability is the class used to represent reachabilities in code. Its definition can be found in AASFile.h.
</p>
<pre>&nbsp;
<span style="color: #339900;">// reachability to another area</span>
class idReachability <span style="color: #000000;">&#123;</span>
<span style="color: #0000ff;">public</span>:
	<span style="color: #0000ff;">int</span>					travelType;		<span style="color: #339900;">// type of travel required to get to the area</span>
	<span style="color: #0000ff;">short</span>					toAreaNum;		<span style="color: #339900;">// number of the reachable area</span>
	<span style="color: #0000ff;">short</span>					fromAreaNum;		<span style="color: #339900;">// number of area the reachability starts</span>
	idVec3					start;			<span style="color: #339900;">// start point of inter area movement</span>
	idVec3					end;			<span style="color: #339900;">// end point of inter area movement</span>
	<span style="color: #0000ff;">int</span>					edgeNum;		<span style="color: #339900;">// edge crossed by this reachability</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>				travelTime;		<span style="color: #339900;">// travel time of the inter area movement</span>
	byte					number;			<span style="color: #339900;">// reachability number within the fromAreaNum (must be &lt; 256)</span>
	byte					disableCount;		<span style="color: #339900;">// number of times this reachability has been disabled</span>
	idReachability *			next;			<span style="color: #339900;">// next reachability in list</span>
	idReachability *			rev_next;		<span style="color: #339900;">// next reachability in reversed list</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span> *			areaTravelTimes;	<span style="color: #339900;">// travel times within the fromAreaNum from reachabilities that lead towards this area</span>
<span style="color: #0000ff;">public</span>:
	<span style="color: #0000ff;">void</span>					CopyBase<span style="color: #000000;">&#40;</span> idReachability &amp;reach <span style="color: #000000;">&#41;</span>;
<span style="color: #000000;">&#125;</span>;</pre>
<p>The first data member is travelType, this will hold the travel flags we looked at earlier. In this case it represents the type of travel necessary to use the reachability to get to the next area. A reachability connects the area in the map indexed as fromAreaNum to the area in the map indexed as toAreaNum. start and end represent the actual location the reachability starts and ends as a position vector. To get from one area to another you typically cross an edge that is shared between the two areas, the index of that edge is stored in edgeNum. Reachabilities are weighted so the routing algorithm can find the least cost path. That weight is stored in travelTime. Each reachability gets an index that represents the reachability in the area. This index is used by the routing system as we will see later. Dynamic obstacles may be added to the AAS system during game play. These obstacles may effectively block reachabilities from being used, disableCount tracks this occurrence. 
</p><p>Remember the definition for area, a pointer to a reachability is used to store all reachabilities for a given direction.
</p>
<pre>&nbsp;
	idReachability *			reach;				<span style="color: #339900;">// reachabilities that start from this area</span>
	idReachability *			rev_reach;			<span style="color: #339900;">// reachabilities that lead to this area</span>
<span style="color: #000000;">&#125;</span> aasArea_t;</pre>
<p>idReachabilities implement a doubly linked list. The idReachability pointer “next? points to the first reachability in this list. Each reachability that leads from the area to another area is added to this list when the idAASFile is loaded. The same is true for rev_next, only for reachabilities that lead to the area are stored instead.  The routing system uses the graph formed by the areas and reachabilities to search for least cost paths from one location to another. We will look at this in depth later. The areaTravelTimes member of idReachability is an array of travel times across an area from other reachabilities that lead towards the area the reachability ends in. These travel times are calculated when the AAS system is initialized for quick lookup later by the routing system.
</p>
<a name="Routing"></a><h2> Routing </h2>
<a name="Multi-level_algorithm_that_calculates_cache"></a><h3> Multi-level algorithm that calculates cache </h3>
<p><i>
“The routing algorithm always calculates and caches routing data for a specific goal area. The routing cache stores per goal area, the travel times of areas towards this goal, and the first reachability to be used from these areas towards this goal..?
</i>
This routing data is stored within idAASLocal which is declared in AAS_local.h:
</p>
<pre>&nbsp;
class idAASLocal&nbsp;: <span style="color: #0000ff;">public</span> idAAS <span style="color: #000000;">&#123;</span>
&nbsp;
<span style="color: #339900; font-style: italic;">/* removed unrelated code */</span>
&nbsp;
<span style="color: #0000ff;">private</span>:	<span style="color: #339900;">// routing data</span>
	idRoutingCache ***		areaCacheIndex;		<span style="color: #339900;">// for each area in each cluster the travel times to all other areas in the cluster</span>
	<span style="color: #0000ff;">int</span>				areaCacheIndexSize;	<span style="color: #339900;">// number of area cache entries</span>
	idRoutingCache **		portalCacheIndex;	<span style="color: #339900;">// for each area in the world the travel times from each portal</span>
	<span style="color: #0000ff;">int</span>				portalCacheIndexSize;	<span style="color: #339900;">// number of portal cache entries</span>
	idRoutingUpdate *		areaUpdate;		<span style="color: #339900;">// memory used to update the area routing cache</span>
	idRoutingUpdate *		portalUpdate;		<span style="color: #339900;">// memory used to update the portal routing cache</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span> *		goalAreaTravelTimes;	<span style="color: #339900;">// travel times to goal areas</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span> *		areaTravelTimes;	<span style="color: #339900;">// travel times through the areas</span>
	<span style="color: #0000ff;">int</span>				numAreaTravelTimes;	<span style="color: #339900;">// number of area travel times</span>
	mutable idRoutingCache *	cacheListStart;		<span style="color: #339900;">// start of list with cache sorted from oldest to newest</span>
	mutable idRoutingCache *	cacheListEnd;		<span style="color: #339900;">// end of list with cache sorted from oldest to newest</span>
	mutable <span style="color: #0000ff;">int</span>			totalCacheMemory;	<span style="color: #339900;">// total cache memory used</span>
	idList&lt;idRoutingObstacle *&gt;	obstacleList;		<span style="color: #339900;">// list with obstacles </span></pre>
<p>If some of these declarations seem unclear don’t worry, we will look at when and how this data is set up soon.
</p><p>Much of the data above is stored in a class named idRoutingCache, it is declared in the same file.
</p>
<pre>&nbsp;
class idRoutingCache <span style="color: #000000;">&#123;</span>
	<span style="color: #0000ff;">friend</span> class idAASLocal;
&nbsp;
<span style="color: #0000ff;">public</span>:
					idRoutingCache<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">int</span> size <span style="color: #000000;">&#41;</span>;
					~idRoutingCache<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">void</span> <span style="color: #000000;">&#41;</span>;
&nbsp;
	<span style="color: #0000ff;">int</span>				Size<span style="color: #000000;">&#40;</span> <span style="color: #0000ff;">void</span> <span style="color: #000000;">&#41;</span> <span style="color: #0000ff;">const</span>;
&nbsp;
<span style="color: #0000ff;">private</span>:
	<span style="color: #0000ff;">int</span>				type;			<span style="color: #339900;">// portal or area cache</span>
	<span style="color: #0000ff;">int</span>				size;			<span style="color: #339900;">// size of cache</span>
	<span style="color: #0000ff;">int</span>				cluster;		<span style="color: #339900;">// cluster of the cache</span>
	<span style="color: #0000ff;">int</span>				areaNum;		<span style="color: #339900;">// area of the cache</span>
	<span style="color: #0000ff;">int</span>				travelFlags;		<span style="color: #339900;">// combinations of the travel flags</span>
	idRoutingCache *		next;			<span style="color: #339900;">// next in list</span>
	idRoutingCache *		prev;			<span style="color: #339900;">// previous in list</span>
	idRoutingCache *		time_next;		<span style="color: #339900;">// next in time based list</span>
	idRoutingCache *		time_prev;		<span style="color: #339900;">// previous in time based list</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span>			startTravelTime;	<span style="color: #339900;">// travel time to start with</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">char</span> *			reachabilities;		<span style="color: #339900;">// reachabilities used for routing</span>
	<span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">short</span> *		travelTimes;		<span style="color: #339900;">// travel time for every area</span>
<span style="color: #000000;">&#125;</span>;</pre>
<p>Notice how each instance will store the area number and travel flags it was created for and as mentioned in the quote above, will store the




<!--
     FILE ARCHIVED ON 23:18:05 Jul 29, 2007 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 2:40:53 Oct 19, 2014.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
