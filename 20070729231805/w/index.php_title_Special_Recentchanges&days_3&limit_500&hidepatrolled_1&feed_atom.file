<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="http://www.modwiki.net/w/skins/common/feed.css"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
		<id>http://www.modwiki.net/w/index.php?title=Special:Recentchanges&amp;days=3&amp;limit=500&amp;hidepatrolled=1&amp;feed=atom</id>
		<title>modwiki - Recent changes [en]</title>
		<link rel="self" type="application/atom+xml" href="http://www.modwiki.net/w/index.php?title=Special:Recentchanges&amp;days=3&amp;limit=500&amp;hidepatrolled=1&amp;feed=atom"/>
		<link rel="alternate" type="text/html" href="http://www.modwiki.net/wiki/Special:Recentchanges"/>
		<updated>2008-01-07T03:00:25Z</updated>
		<subtitle>Track the most recent changes to the wiki on this page.</subtitle>
		<generator>MediaWiki 1.6.8</generator>

	<entry>
		<id>http://www.modwiki.net/wiki/Func_ladder_%28entity%29</id>
		<title>Func ladder (entity)</title>
		<link rel="alternate" type="text/html" href="http://www.modwiki.net/wiki/Func_ladder_%28entity%29"/>
				<updated>2008-01-06T08:45:18Z</updated>
		
		<summary type="html">&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;New page&lt;/b&gt;&lt;/p&gt;&lt;div&gt;Ladders! &lt;br /&gt;
by Calrathan&lt;br /&gt;
If you've played Quake2, HalfLife, or a number of other newer games, you've seen and used ladders. What better way is there of going up and down? iD software proposed jump pads, but if you're like the hundreds of other mod authors out there who want a touch of realism, jump and accelerator pads just won't do! So why are you here? To get ladders working in Quake3 of course!&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
1. PLAYER MOVEMENT CODE &lt;br /&gt;
For those of you who aren't really well versed in the code, I'll go into a little background on bg_pmove.c. This is the file that controls all of the different ways a client can move. Because we're allowed to change it, it is included in both the cgame [for prediction] module, and the game [for actual movement] module. Just remember to compile BOTH of these projects after we're done, or Ranger / Mynx / Bitterman / Whoever will have a major case of the jitters. =)&lt;br /&gt;
The player movement code basically has two main parts. Almost all of the movement code is called from void PmoveSingle (pmove_t *pmove). This function, with the help of a bunch of if statements, takes the state of the player and determines which type of movement they're allowed to make. The different movement functions are: PM_NoclipMove, PM_DeadMove, PM_FlyMove, PM_GrappleMove, PM_AirMove, PM_WaterJumpMove, PM_WaterMove, PM_WalkMove &amp;amp; PM_AirMove.&lt;br /&gt;
&lt;br /&gt;
What this tutorial [hopefully] will show you, is how to make PM_LadderMove, as well as the functions and modifications needed to check and see if we're on the ladder.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
2. THE DEFINITIONS &lt;br /&gt;
As with every C/C++ program, before you use something, you need to define it. So let's do just that. We'll need a flag that we can set somewhere when we really ARE on the ladder, so we don't need to check more than once per client frame. In bg_pmove.c there is a global definition of a a structure &amp;quot;pml&amp;quot; of type &amp;quot;pml_t&amp;quot;. This player movement structure is just the place to add this flag. Go ahead and open up bg_local.h and look for the structure definiton. When you get there, add the hilighted line below. &lt;br /&gt;
&lt;br /&gt;
typedef struct { &lt;br /&gt;
    vec3_t forward, right, up; &lt;br /&gt;
    float frametime; &lt;br /&gt;
&lt;br /&gt;
    int msec; &lt;br /&gt;
&lt;br /&gt;
    qboolean  walking; &lt;br /&gt;
    qboolean  groundPlane; &lt;br /&gt;
    trace_t   groundTrace; &lt;br /&gt;
    qboolean  ladder; // We'll use this to tell when the player is on a ladder&lt;br /&gt;
 &lt;br /&gt;
    float impactSpeed; &lt;br /&gt;
&lt;br /&gt;
    vec3_t previous_origin; &lt;br /&gt;
    vec3_t previous_velocity; &lt;br /&gt;
    int previous_waterlevel; &lt;br /&gt;
} pml_t;&lt;br /&gt;
&lt;br /&gt;
Sorry, but we're not quite done with our definitions. Open up bg_pmove.c and look at the &amp;quot;movement parameters&amp;quot; section. You'll notice that there seem to be different settings for different types of motion. the scale variables basically set the maximum velocity. The accelerate variables determine how quickly you reach maximum velocity, and the friction values determine how quickly you stop. Because we're moving vertically, we obviously can't go as fast as normal running. Ladders aren't like running surfaces which we slip and slide on. Movement is very discrete on ladders, so we want to reach our maxiumum speed right away, and we want to stop right away. [ Can you imagine floating upward on a ladder even after you stopped moving? ] Because of all these factors, I chose the following values for our ladder. Feel free to play with them and see what happens. &lt;br /&gt;
  // movement parameters&lt;br /&gt;
  float  pm_stopspeed = 100;&lt;br /&gt;
  float  pm_duckScale = 0.25;&lt;br /&gt;
  float  pm_swimScale = 0.50;&lt;br /&gt;
  floa